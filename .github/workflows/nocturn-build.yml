name: NocturN Build
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      os_patch_level:
        description: 'OS patch level (YYYY-MM)'
        required: false
        default: ''
      release_type:
        description: 'Release type: Stable (release) or Test (prerelease)'
        required: true
        default: 'test'

jobs:
  build-gki:
    runs-on: ubuntu-latest

    steps:
      - name: Check Initial Disk Space
        run: |
          echo "===== Initial Total Disk Space in GB ====="
          df -BG

      - name: Free up space
        run: |
          curl -L -o util_free_space.sh https://raw.githubusercontent.com/apache/arrow/main/ci/scripts/util_free_space.sh
          chmod +x util_free_space.sh
          ./util_free_space.sh
          df -BG

      - name: Set fixed variables (android15 / 6.6)
        run: |
          echo "ANDROID_VERSION=android15" >> $GITHUB_ENV
          echo "KERNEL_VERSION=6.6" >> $GITHUB_ENV
          echo "CONFIG=android15-6.6" >> $GITHUB_ENV

      - name: Resolve OS_PATCH_LEVEL (auto if blank)
        run: |
          OPL="${{ inputs.os_patch_level }}"
          if [ -z "$OPL" ] || [ "$OPL" = "auto" ]; then
            OPL="$(date -u +%Y-%m)"
          fi
          echo "OS_PATCH_LEVEL=$OPL" >> $GITHUB_ENV

      - name: Setup Build Environment
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-2025
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools &
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg &
          wait

          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV

          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Set boot sign key
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ -n "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          fi

      - name: Clone AnyKernel3 (no extra patches)
        run: |
          git clone https://github.com/heybyben/AnyKernel3.git -b nocturn

      - name: Initialize and Sync Kernel Source
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          FORMATTED_BRANCH="android15-6.6-$OS_PATCH_LEVEL"
          $REPO init -u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16 --depth=1
          $REPO sync -c -j$(nproc) --no-tags --fail-fast

      - name: Extract Kernel SUBLEVEL
        id: sublevel
        run: |
          cd "$CONFIG/common"
          SUBLEVEL=$(grep -E '^SUBLEVEL[[:space:]]*=' Makefile | awk '{print $3}')
          echo "SUBLEVEL=$SUBLEVEL" >> $GITHUB_ENV
          echo "sublevel=$SUBLEVEL" >> $GITHUB_OUTPUT

      - name: Minor include fix for <6.6.50 (idempotent)
        run: |
          cd "$CONFIG/common"
          if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c 2>/dev/null; then
            sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c || true
          fi

      - name: Disable check_defconfig
        run: |
          cd "$CONFIG"
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Configure Kernel Features (vanilla-friendly)
        run: |
          cd "$CONFIG"
          DEFCONFIG=common/arch/arm64/configs/gki_defconfig
          {
            echo "# Mountify"
            echo "CONFIG_TMPFS_XATTR=y"
            echo "CONFIG_TMPFS_POSIX_ACL=y"

            echo "# Networking"
            echo "CONFIG_IP_NF_TARGET_TTL=y"
            echo "CONFIG_IP6_NF_TARGET_HL=y"
            echo "CONFIG_IP6_NF_MATCH_HL=y"

            echo "# TCP BBR"
            echo "CONFIG_TCP_CONG_ADVANCED=y"
            echo "CONFIG_TCP_CONG_BBR=y"
            echo "CONFIG_NET_SCH_FQ=y"

            echo "# IPSet"
            echo "CONFIG_IP_SET=y"
            echo "CONFIG_IP_SET_MAX=65534"

            echo "# Sound"
            echo "CONFIG_SND=y"
            echo "CONFIG_SND_ALOOP=m"

            echo "# Build Optimization"
            echo "CONFIG_LTO_CLANG_THIN=y"
            echo "CONFIG_LTO_CLANG=y"

            echo "# Branding"
            echo 'CONFIG_LOCALVERSION="-NocturN"'
            echo '# CONFIG_LOCALVERSION_AUTO is not set'
          } >> "$DEFCONFIG"

          # Tambah module snd-aloop ke daftar modul GKI bila perlu
          if [ -f "build/build.sh" ]; then
            echo "sound/drivers/snd-aloop.ko" >> common/android/gki_aarch64_modules
          else
            sed -i '/_COMMON_GKI_MODULES_LIST = \\[/,/\\]/ s/\\]/    "sound\/drivers\/snd-aloop.ko",\n&/' common/modules.bzl
          fi

      - name: Clean Bazel exports (no localversion hacks)
        run: |
          cd "$CONFIG"
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl || true
          rm -rf ./common/android/abi_gki_protected_exports_* || true
          perl -pi -e 's/^\s*"protected_exports_list"\s*:\s*"android\/abi_gki_protected_exports_aarch64",\s*$//;' ./common/BUILD.bazel || true

      - name: Build Kernel (Bazel)
        run: |
          cd "$CONFIG"
          export KBUILD_BUILD_USER="NocturN"
          export KBUILD_BUILD_HOST="CI"
          export KBUILD_BUILD_TIMESTAMP="$(date -u '+%a %b %d %H:%M:%S UTC %Y')"
          export SOURCE_DATE_EPOCH="$(date -u +%s)"
          tools/bazel build --config=fast --lto=thin \
            --action_env=KBUILD_BUILD_USER \
            --action_env=KBUILD_BUILD_HOST \
            --action_env=KBUILD_BUILD_TIMESTAMP \
            --action_env=SOURCE_DATE_EPOCH \
            //common:kernel_aarch64_dist

      - name: Prepare AnyKernel3 Image
        run: |
          IMG="./$CONFIG/bazel-bin/common/kernel_aarch64/Image"
          test -f "$IMG" || (echo "Error: $IMG not found" && exit 1)
          cp "$IMG" AnyKernel3/Image

      - name: Set release file + tag names
        id: names
        run: |
          DATE=$(date -u +%Y%m%d)
          RAND=$(shuf -i 1000-9999 -n 1)
          FILE_NAME="NocturN-GKI-6.6-${DATE}-${RAND}"
          if [ "${{ inputs.release_type }}" = "release" ]; then
            TAG="v6.6-${DATE}-${RAND}"
            TITLE="NocturN GKI 6.6 (${DATE})"
            MAKE_LATEST="true"
          else
            TAG="test-6.6-${DATE}-${RAND}"
            TITLE="NocturN GKI 6.6 Test (${DATE})"
            MAKE_LATEST="false"
          fi
          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
          echo "RELEASE_TITLE=$TITLE" >> $GITHUB_ENV
          echo "MAKE_LATEST=$MAKE_LATEST" >> $GITHUB_ENV

      - name: Package flashable AnyKernel zip
        run: |
          cd AnyKernel3
          rm -rf .git .github || true
          zip -r9 ../${{ env.FILE_NAME }}.zip . -x "*.git*" "*.github*"

      - name: Build Summary
        run: |
          echo "# Kernel Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "## ${{ env.FILE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Version:** android15" >> $GITHUB_STEP_SUMMARY
          echo "- **Kernel:** 6.6.${{ steps.sublevel.outputs.sublevel }}" >> $GITHUB_STEP_SUMMARY
          echo "- **OS Patch (branch):** $OS_PATCH_LEVEL" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date:** $(date -u +'%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Tag:** ${{ env.RELEASE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Asset:** ${{ env.FILE_NAME }}.zip" >> $GITHUB_STEP_SUMMARY

      - name: Publish GitHub Release (upload asset)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_TITLE }}
          prerelease: ${{ inputs.release_type != 'release' }}
          draft: false
          generate_release_notes: true
          make_latest: ${{ env.MAKE_LATEST }}
          files: |
            ${{ env.FILE_NAME }}.zip
