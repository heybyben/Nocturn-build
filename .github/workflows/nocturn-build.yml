name: NocturN Build
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      os_patch_level:
        description: 'OS patch level (YYYY-MM)'
        required: false
        default: ''
      release_type:
        description: 'Release type: Stable (release) or Test (prerelease)'
        required: true
        default: 'test'
      root_option:
        description: 'Root option: none (Vanilla) / suki (SukiSU+SUSFS) / both'
        required: true
        default: 'both'
      version_label:
        description: 'Version label (e.g., v1.0)'
        required: true
        default: 'v1.0'

jobs:
  build-gki:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant: [vanilla, suki]

    steps:
      - name: Decide if this variant should run
        id: filter
        run: |
          ROOT_OPT="${{ inputs.root_option }}"
          VARIANT="${{ matrix.variant }}"
          SHOULD_RUN=false
          if [ "$ROOT_OPT" = "both" ]; then
            SHOULD_RUN=true
          elif [ "$ROOT_OPT" = "none" ] && [ "$VARIANT" = "vanilla" ]; then
            SHOULD_RUN=true
          elif [ "$ROOT_OPT" = "suki" ] && [ "$VARIANT" = "suki" ]; then
            SHOULD_RUN=true
          fi
          echo "run=$SHOULD_RUN" >> $GITHUB_OUTPUT

      - name: Set fixed variables
        if: steps.filter.outputs.run == 'true'
        run: |
          echo "ANDROID_VERSION=android15" >> $GITHUB_ENV
          echo "KERNEL_VERSION=6.6" >> $GITHUB_ENV
          echo "VARIANT=${{ matrix.variant }}" >> $GITHUB_ENV
          echo "VERSION_LABEL=${{ inputs.version_label }}" >> $GITHUB_ENV

      - name: Setup Build Environment
        if: steps.filter.outputs.run == 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-2025
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools &
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg &
          wait
          mkdir -p ./git-repo
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3
        if: steps.filter.outputs.run == 'true'
        run: git clone https://github.com/heybyben/AnyKernel3.git -b nocturn

      - name: Initialize and Sync Kernel Source
        if: steps.filter.outputs.run == 'true'
        run: |
          mkdir -p "$VARIANT"
          cd "$VARIANT"
          $REPO init -u https://android.googlesource.com/kernel/manifest -b common-android15-6.6-${{ inputs.os_patch_level || '2025-10' }} --depth=1
          $REPO sync -c -j$(nproc) --no-tags --fail-fast

      - name: Configure Kernel
        if: steps.filter.outputs.run == 'true'
        run: |
          cd "$VARIANT"
          DEFCONFIG=common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_XATTR=y" >> "$DEFCONFIG"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$DEFCONFIG"
          if [ "$VARIANT" = "vanilla" ]; then
            echo "CONFIG_LOCALVERSION=\"-NocturN-${VERSION_LABEL}\"" >> "$DEFCONFIG"
          else
            echo "CONFIG_LOCALVERSION=\"-NocturN+SukiSU-${VERSION_LABEL}\"" >> "$DEFCONFIG"
          fi
          echo '# CONFIG_LOCALVERSION_AUTO is not set' >> "$DEFCONFIG"

      - name: Integrate SukiSU (only for suki)
        if: steps.filter.outputs.run == 'true' && matrix.variant == 'suki'
        run: |
          cd "$VARIANT/common"
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s main
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main

      - name: Build Kernel
        if: steps.filter.outputs.run == 'true'
        run: |
          cd "$VARIANT"
          export KBUILD_BUILD_USER="NocturN"
          export KBUILD_BUILD_HOST="CI"
          tools/bazel build --config=fast --lto=thin //common:kernel_aarch64_dist

      - name: Prepare AnyKernel3 Image
        if: steps.filter.outputs.run == 'true'
        run: |
          IMG="./$VARIANT/bazel-bin/common/kernel_aarch64/Image"
          cp "$IMG" AnyKernel3/Image
          cd AnyKernel3
          if [ "$VARIANT" = "vanilla" ]; then
            sed -i "s/^kernelstring=.*/kernelstring=\"NocturN Kernel ${VERSION_LABEL}\"/" anykernel.sh
          else
            sed -i "s/^kernelstring=.*/kernelstring=\"NocturN Kernel +SukiSU ${VERSION_LABEL}\"/" anykernel.sh
          fi
          cd ..

      - name: Package flashable AnyKernel zip
        if: steps.filter.outputs.run == 'true'
        run: |
          DATE=$(date -u +%Y%m%d)
          if [ "$VARIANT" = "vanilla" ]; then VAR_TAG="Vanilla"; else VAR_TAG="SukiSU"; fi
          FILE_NAME="NocturN-GKI-6.6-${DATE}-${VAR_TAG}-${VERSION_LABEL}.zip"
          cd AnyKernel3
          zip -r9 "../${FILE_NAME}" . -x "*.git*" "*.github*"
          cd ..
          mkdir -p artifacts
          mv "${FILE_NAME}" artifacts/

      - name: Upload Build Artifact
        if: steps.filter.outputs.run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.variant }}
          path: artifacts/*.zip

  publish-release:
    runs-on: ubuntu-latest
    needs: build-gki
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all_zips

      - name: Create unified release
        run: |
          DATE=$(date -u +%Y%m%d)
          VERSION="${{ inputs.version_label }}"
          if [ "${{ inputs.release_type }}" = "release" ]; then
            TAG="v6.6-${DATE}-${VERSION}"
            TITLE="NocturN GKI 6.6 (${DATE})"
            PRERELEASE=false
          else
            TAG="test-6.6-${DATE}-${VERSION}"
            TITLE="NocturN GKI 6.6 Test (${DATE})"
            PRERELEASE=true
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "TITLE=$TITLE" >> $GITHUB_ENV
          echo "PRERELEASE=$PRERELEASE" >> $GITHUB_ENV

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TITLE }}
          prerelease: ${{ env.PRERELEASE }}
          draft: false
          generate_release_notes: true
          files: ./all_zips/**/*.zip
